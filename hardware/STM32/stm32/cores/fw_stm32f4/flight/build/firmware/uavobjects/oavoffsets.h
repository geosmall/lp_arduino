/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup OAVOffsets OAVOffsets
 * @brief OAV Offset Set Points
 *
 * Autogenerated files and functions for OAVOffsets Object
 *
 * @{
 *
 * @file       oavoffsets.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the OAVOffsets object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: oavoffsets.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OAVOFFSETS_H
#define OAVOFFSETS_H
#include <stdbool.h>
/* Object constants */
#define OAVOFFSETS_OBJID 0x1BC06472
#define OAVOFFSETS_ISSINGLEINST 1
#define OAVOFFSETS_ISSETTINGS 1
#define OAVOFFSETS_ISPRIORITY 0
#define OAVOFFSETS_NUMBYTES sizeof(OAVOffsetsData)

/* Generic interface functions */
int32_t OAVOffsetsInitialize();
UAVObjHandle OAVOffsetsHandle();
void OAVOffsetsSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field OffsetPoint1 information */

// Number of elements for field OffsetPoint1
#define OAVOFFSETS_OFFSETPOINT1_NUMELEM 10

/* Field OffsetPoint2 information */

// Number of elements for field OffsetPoint2
#define OAVOFFSETS_OFFSETPOINT2_NUMELEM 10

/* Field OffsetPoint3 information */

// Number of elements for field OffsetPoint3
#define OAVOFFSETS_OFFSETPOINT3_NUMELEM 10

/* Field OffsetPoint4 information */

// Number of elements for field OffsetPoint4
#define OAVOFFSETS_OFFSETPOINT4_NUMELEM 10

/* Field OffsetPoint5 information */

// Number of elements for field OffsetPoint5
#define OAVOFFSETS_OFFSETPOINT5_NUMELEM 10

/* Field OffsetPoint6 information */

// Number of elements for field OffsetPoint6
#define OAVOFFSETS_OFFSETPOINT6_NUMELEM 10

/* Field OffsetPoint7 information */

// Number of elements for field OffsetPoint7
#define OAVOFFSETS_OFFSETPOINT7_NUMELEM 10




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        int8_t OffsetPoint1[10];
    int8_t OffsetPoint2[10];
    int8_t OffsetPoint3[10];
    int8_t OffsetPoint4[10];
    int8_t OffsetPoint5[10];
    int8_t OffsetPoint6[10];
    int8_t OffsetPoint7[10];

} __attribute__((packed)) OAVOffsetsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef OAVOffsetsDataPacked __attribute__((aligned(4))) OAVOffsetsData;

/* Typesafe Object access functions */
static inline int32_t OAVOffsetsGet(OAVOffsetsData * dataOut) {
    return UAVObjGetData(OAVOffsetsHandle(), dataOut);
}
static inline int32_t OAVOffsetsSet(const OAVOffsetsData * dataIn) {
    return UAVObjSetData(OAVOffsetsHandle(), dataIn);
}
static inline int32_t OAVOffsetsInstGet(uint16_t instId, OAVOffsetsData * dataOut) {
    return UAVObjGetInstanceData(OAVOffsetsHandle(), instId, dataOut);
}
static inline int32_t OAVOffsetsInstSet(uint16_t instId, const OAVOffsetsData * dataIn) {
    return UAVObjSetInstanceData(OAVOffsetsHandle(), instId, dataIn);
}
static inline int32_t OAVOffsetsConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(OAVOffsetsHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t OAVOffsetsConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OAVOffsetsHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t OAVOffsetsConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OAVOffsetsHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t OAVOffsetsCreateInstance() {
    return UAVObjCreateInstance(OAVOffsetsHandle(), &OAVOffsetsSetDefaults);
}
static inline void OAVOffsetsRequestUpdate() {
    UAVObjRequestUpdate(OAVOffsetsHandle());
}
static inline void OAVOffsetsRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(OAVOffsetsHandle(), instId);
}
static inline void OAVOffsetsUpdated() {
    UAVObjUpdated(OAVOffsetsHandle());
}
static inline void OAVOffsetsInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(OAVOffsetsHandle(), instId);
}
static inline void OAVOffsetsLogging() {
    UAVObjLogging(OAVOffsetsHandle());
}
static inline void OAVOffsetsInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(OAVOffsetsHandle(), instId);
}
static inline int32_t OAVOffsetsGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(OAVOffsetsHandle(), dataOut);
}
static inline int32_t OAVOffsetsSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(OAVOffsetsHandle(), dataIn);
}
static inline int8_t OAVOffsetsReadOnly() {
    return UAVObjReadOnly(OAVOffsetsHandle());
}

/* Set/Get functions */
extern void OAVOffsetsOffsetPoint1Set(int8_t *NewOffsetPoint1);
extern void OAVOffsetsOffsetPoint1Get(int8_t *NewOffsetPoint1);
extern void OAVOffsetsOffsetPoint2Set(int8_t *NewOffsetPoint2);
extern void OAVOffsetsOffsetPoint2Get(int8_t *NewOffsetPoint2);
extern void OAVOffsetsOffsetPoint3Set(int8_t *NewOffsetPoint3);
extern void OAVOffsetsOffsetPoint3Get(int8_t *NewOffsetPoint3);
extern void OAVOffsetsOffsetPoint4Set(int8_t *NewOffsetPoint4);
extern void OAVOffsetsOffsetPoint4Get(int8_t *NewOffsetPoint4);
extern void OAVOffsetsOffsetPoint5Set(int8_t *NewOffsetPoint5);
extern void OAVOffsetsOffsetPoint5Get(int8_t *NewOffsetPoint5);
extern void OAVOffsetsOffsetPoint6Set(int8_t *NewOffsetPoint6);
extern void OAVOffsetsOffsetPoint6Get(int8_t *NewOffsetPoint6);
extern void OAVOffsetsOffsetPoint7Set(int8_t *NewOffsetPoint7);
extern void OAVOffsetsOffsetPoint7Get(int8_t *NewOffsetPoint7);


#endif // OAVOFFSETS_H

/**
 * @}
 * @}
 */
