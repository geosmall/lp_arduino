/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup OAVFlightProfiles OAVFlightProfiles
 * @brief OAV Flight Profile Settings
 *
 * Autogenerated files and functions for OAVFlightProfiles Object
 *
 * @{
 *
 * @file       oavflightprofiles.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the OAVFlightProfiles object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: oavflightprofiles.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OAVFLIGHTPROFILES_H
#define OAVFLIGHTPROFILES_H
#include <stdbool.h>
/* Object constants */
#define OAVFLIGHTPROFILES_OBJID 0xCCD782BA
#define OAVFLIGHTPROFILES_ISSINGLEINST 1
#define OAVFLIGHTPROFILES_ISSETTINGS 1
#define OAVFLIGHTPROFILES_ISPRIORITY 0
#define OAVFLIGHTPROFILES_NUMBYTES sizeof(OAVFlightProfilesData)

/* Generic interface functions */
int32_t OAVFlightProfilesInitialize();
UAVObjHandle OAVFlightProfilesHandle();
void OAVFlightProfilesSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field RollP information */

// Number of elements for field RollP
#define OAVFLIGHTPROFILES_ROLLP_NUMELEM 2

/* Field RollI information */

// Number of elements for field RollI
#define OAVFLIGHTPROFILES_ROLLI_NUMELEM 2

/* Field RollILimit information */

// Number of elements for field RollILimit
#define OAVFLIGHTPROFILES_ROLLILIMIT_NUMELEM 2

/* Field RollIRate information */

// Number of elements for field RollIRate
#define OAVFLIGHTPROFILES_ROLLIRATE_NUMELEM 2

/* Field RollAutoLvl information */

// Number of elements for field RollAutoLvl
#define OAVFLIGHTPROFILES_ROLLAUTOLVL_NUMELEM 2

/* Field RollTrim information */

// Number of elements for field RollTrim
#define OAVFLIGHTPROFILES_ROLLTRIM_NUMELEM 2

/* Field PitchP information */

// Number of elements for field PitchP
#define OAVFLIGHTPROFILES_PITCHP_NUMELEM 2

/* Field PitchI information */

// Number of elements for field PitchI
#define OAVFLIGHTPROFILES_PITCHI_NUMELEM 2

/* Field PitchILimit information */

// Number of elements for field PitchILimit
#define OAVFLIGHTPROFILES_PITCHILIMIT_NUMELEM 2

/* Field PitchIRate information */

// Number of elements for field PitchIRate
#define OAVFLIGHTPROFILES_PITCHIRATE_NUMELEM 2

/* Field PitchAutoLvl information */

// Number of elements for field PitchAutoLvl
#define OAVFLIGHTPROFILES_PITCHAUTOLVL_NUMELEM 2

/* Field PitchTrim information */

// Number of elements for field PitchTrim
#define OAVFLIGHTPROFILES_PITCHTRIM_NUMELEM 2

/* Field YawP information */

// Number of elements for field YawP
#define OAVFLIGHTPROFILES_YAWP_NUMELEM 2

/* Field YawI information */

// Number of elements for field YawI
#define OAVFLIGHTPROFILES_YAWI_NUMELEM 2

/* Field YawILimit information */

// Number of elements for field YawILimit
#define OAVFLIGHTPROFILES_YAWILIMIT_NUMELEM 2

/* Field YawIRate information */

// Number of elements for field YawIRate
#define OAVFLIGHTPROFILES_YAWIRATE_NUMELEM 2

/* Field YawTrim information */

// Number of elements for field YawTrim
#define OAVFLIGHTPROFILES_YAWTRIM_NUMELEM 2

/* Field AZedP information */

// Number of elements for field AZedP
#define OAVFLIGHTPROFILES_AZEDP_NUMELEM 2

/* Field AZedI information */

// Number of elements for field AZedI
#define OAVFLIGHTPROFILES_AZEDI_NUMELEM 2

/* Field AZedILimit information */

// Number of elements for field AZedILimit
#define OAVFLIGHTPROFILES_AZEDILIMIT_NUMELEM 2




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        int8_t RollP[2];
    int8_t RollI[2];
    int8_t RollILimit[2];
    int8_t RollIRate[2];
    int8_t RollAutoLvl[2];
    int8_t RollTrim[2];
    int8_t PitchP[2];
    int8_t PitchI[2];
    int8_t PitchILimit[2];
    int8_t PitchIRate[2];
    int8_t PitchAutoLvl[2];
    int8_t PitchTrim[2];
    int8_t YawP[2];
    int8_t YawI[2];
    int8_t YawILimit[2];
    int8_t YawIRate[2];
    int8_t YawTrim[2];
    int8_t AZedP[2];
    int8_t AZedI[2];
    int8_t AZedILimit[2];

} __attribute__((packed)) OAVFlightProfilesDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef OAVFlightProfilesDataPacked __attribute__((aligned(4))) OAVFlightProfilesData;

/* Typesafe Object access functions */
static inline int32_t OAVFlightProfilesGet(OAVFlightProfilesData * dataOut) {
    return UAVObjGetData(OAVFlightProfilesHandle(), dataOut);
}
static inline int32_t OAVFlightProfilesSet(const OAVFlightProfilesData * dataIn) {
    return UAVObjSetData(OAVFlightProfilesHandle(), dataIn);
}
static inline int32_t OAVFlightProfilesInstGet(uint16_t instId, OAVFlightProfilesData * dataOut) {
    return UAVObjGetInstanceData(OAVFlightProfilesHandle(), instId, dataOut);
}
static inline int32_t OAVFlightProfilesInstSet(uint16_t instId, const OAVFlightProfilesData * dataIn) {
    return UAVObjSetInstanceData(OAVFlightProfilesHandle(), instId, dataIn);
}
static inline int32_t OAVFlightProfilesConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(OAVFlightProfilesHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t OAVFlightProfilesConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OAVFlightProfilesHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t OAVFlightProfilesConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OAVFlightProfilesHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t OAVFlightProfilesCreateInstance() {
    return UAVObjCreateInstance(OAVFlightProfilesHandle(), &OAVFlightProfilesSetDefaults);
}
static inline void OAVFlightProfilesRequestUpdate() {
    UAVObjRequestUpdate(OAVFlightProfilesHandle());
}
static inline void OAVFlightProfilesRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(OAVFlightProfilesHandle(), instId);
}
static inline void OAVFlightProfilesUpdated() {
    UAVObjUpdated(OAVFlightProfilesHandle());
}
static inline void OAVFlightProfilesInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(OAVFlightProfilesHandle(), instId);
}
static inline void OAVFlightProfilesLogging() {
    UAVObjLogging(OAVFlightProfilesHandle());
}
static inline void OAVFlightProfilesInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(OAVFlightProfilesHandle(), instId);
}
static inline int32_t OAVFlightProfilesGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(OAVFlightProfilesHandle(), dataOut);
}
static inline int32_t OAVFlightProfilesSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(OAVFlightProfilesHandle(), dataIn);
}
static inline int8_t OAVFlightProfilesReadOnly() {
    return UAVObjReadOnly(OAVFlightProfilesHandle());
}

/* Set/Get functions */
extern void OAVFlightProfilesRollPSet(int8_t *NewRollP);
extern void OAVFlightProfilesRollPGet(int8_t *NewRollP);
extern void OAVFlightProfilesRollISet(int8_t *NewRollI);
extern void OAVFlightProfilesRollIGet(int8_t *NewRollI);
extern void OAVFlightProfilesRollILimitSet(int8_t *NewRollILimit);
extern void OAVFlightProfilesRollILimitGet(int8_t *NewRollILimit);
extern void OAVFlightProfilesRollIRateSet(int8_t *NewRollIRate);
extern void OAVFlightProfilesRollIRateGet(int8_t *NewRollIRate);
extern void OAVFlightProfilesRollAutoLvlSet(int8_t *NewRollAutoLvl);
extern void OAVFlightProfilesRollAutoLvlGet(int8_t *NewRollAutoLvl);
extern void OAVFlightProfilesRollTrimSet(int8_t *NewRollTrim);
extern void OAVFlightProfilesRollTrimGet(int8_t *NewRollTrim);
extern void OAVFlightProfilesPitchPSet(int8_t *NewPitchP);
extern void OAVFlightProfilesPitchPGet(int8_t *NewPitchP);
extern void OAVFlightProfilesPitchISet(int8_t *NewPitchI);
extern void OAVFlightProfilesPitchIGet(int8_t *NewPitchI);
extern void OAVFlightProfilesPitchILimitSet(int8_t *NewPitchILimit);
extern void OAVFlightProfilesPitchILimitGet(int8_t *NewPitchILimit);
extern void OAVFlightProfilesPitchIRateSet(int8_t *NewPitchIRate);
extern void OAVFlightProfilesPitchIRateGet(int8_t *NewPitchIRate);
extern void OAVFlightProfilesPitchAutoLvlSet(int8_t *NewPitchAutoLvl);
extern void OAVFlightProfilesPitchAutoLvlGet(int8_t *NewPitchAutoLvl);
extern void OAVFlightProfilesPitchTrimSet(int8_t *NewPitchTrim);
extern void OAVFlightProfilesPitchTrimGet(int8_t *NewPitchTrim);
extern void OAVFlightProfilesYawPSet(int8_t *NewYawP);
extern void OAVFlightProfilesYawPGet(int8_t *NewYawP);
extern void OAVFlightProfilesYawISet(int8_t *NewYawI);
extern void OAVFlightProfilesYawIGet(int8_t *NewYawI);
extern void OAVFlightProfilesYawILimitSet(int8_t *NewYawILimit);
extern void OAVFlightProfilesYawILimitGet(int8_t *NewYawILimit);
extern void OAVFlightProfilesYawIRateSet(int8_t *NewYawIRate);
extern void OAVFlightProfilesYawIRateGet(int8_t *NewYawIRate);
extern void OAVFlightProfilesYawTrimSet(int8_t *NewYawTrim);
extern void OAVFlightProfilesYawTrimGet(int8_t *NewYawTrim);
extern void OAVFlightProfilesAZedPSet(int8_t *NewAZedP);
extern void OAVFlightProfilesAZedPGet(int8_t *NewAZedP);
extern void OAVFlightProfilesAZedISet(int8_t *NewAZedI);
extern void OAVFlightProfilesAZedIGet(int8_t *NewAZedI);
extern void OAVFlightProfilesAZedILimitSet(int8_t *NewAZedILimit);
extern void OAVFlightProfilesAZedILimitGet(int8_t *NewAZedILimit);


#endif // OAVFLIGHTPROFILES_H

/**
 * @}
 * @}
 */
