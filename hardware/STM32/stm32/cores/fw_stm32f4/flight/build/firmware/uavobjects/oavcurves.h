/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup OAVCurves OAVCurves
 * @brief OAV Curve Set Points
 *
 * Autogenerated files and functions for OAVCurves Object
 *
 * @{
 *
 * @file       oavcurves.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the OAVCurves object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: oavcurves.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OAVCURVES_H
#define OAVCURVES_H
#include <stdbool.h>
/* Object constants */
#define OAVCURVES_OBJID 0xDAF8EA70
#define OAVCURVES_ISSINGLEINST 1
#define OAVCURVES_ISSETTINGS 1
#define OAVCURVES_ISPRIORITY 0
#define OAVCURVES_NUMBYTES sizeof(OAVCurvesData)

/* Generic interface functions */
int32_t OAVCurvesInitialize();
UAVObjHandle OAVCurvesHandle();
void OAVCurvesSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field CurvePoint1 information */

// Number of elements for field CurvePoint1
#define OAVCURVES_CURVEPOINT1_NUMELEM 6

/* Field CurvePoint2 information */

// Number of elements for field CurvePoint2
#define OAVCURVES_CURVEPOINT2_NUMELEM 6

/* Field CurvePoint3 information */

// Number of elements for field CurvePoint3
#define OAVCURVES_CURVEPOINT3_NUMELEM 6

/* Field CurvePoint4 information */

// Number of elements for field CurvePoint4
#define OAVCURVES_CURVEPOINT4_NUMELEM 6

/* Field CurvePoint5 information */

// Number of elements for field CurvePoint5
#define OAVCURVES_CURVEPOINT5_NUMELEM 6

/* Field CurvePoint6 information */

// Number of elements for field CurvePoint6
#define OAVCURVES_CURVEPOINT6_NUMELEM 6

/* Field CurvePoint7 information */

// Number of elements for field CurvePoint7
#define OAVCURVES_CURVEPOINT7_NUMELEM 6

/* Field CurveSource information */

// Enumeration options for field CurveSource
typedef enum __attribute__ ((__packed__)) {
    OAVCURVES_CURVESOURCE_THROTTLE=0,
    OAVCURVES_CURVESOURCE_AILERON=1,
    OAVCURVES_CURVESOURCE_ELEVATOR=2,
    OAVCURVES_CURVESOURCE_RUDDER=3,
    OAVCURVES_CURVESOURCE_GEAR=4,
    OAVCURVES_CURVESOURCE_AUX1=5,
    OAVCURVES_CURVESOURCE_AUX2=6,
    OAVCURVES_CURVESOURCE_AUX3=7,
    OAVCURVES_CURVESOURCE_ROLLGYRO=8,
    OAVCURVES_CURVESOURCE_PITCHGYRO=9,
    OAVCURVES_CURVESOURCE_YAWGYRO=10,
    OAVCURVES_CURVESOURCE_ACCSMOOTH=11,
    OAVCURVES_CURVESOURCE_PITCHSMOOTH=12,
    OAVCURVES_CURVESOURCE_ROLLACC=13,
    OAVCURVES_CURVESOURCE_PITCHACC=14,
    OAVCURVES_CURVESOURCE_NOSOURCE=15
} OAVCurvesCurveSourceOptions;

// Number of elements for field CurveSource
#define OAVCURVES_CURVESOURCE_NUMELEM 6




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        int8_t CurvePoint1[6];
    int8_t CurvePoint2[6];
    int8_t CurvePoint3[6];
    int8_t CurvePoint4[6];
    int8_t CurvePoint5[6];
    int8_t CurvePoint6[6];
    int8_t CurvePoint7[6];
    OAVCurvesCurveSourceOptions CurveSource[6];

} __attribute__((packed)) OAVCurvesDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef OAVCurvesDataPacked __attribute__((aligned(4))) OAVCurvesData;

/* Typesafe Object access functions */
static inline int32_t OAVCurvesGet(OAVCurvesData * dataOut) {
    return UAVObjGetData(OAVCurvesHandle(), dataOut);
}
static inline int32_t OAVCurvesSet(const OAVCurvesData * dataIn) {
    return UAVObjSetData(OAVCurvesHandle(), dataIn);
}
static inline int32_t OAVCurvesInstGet(uint16_t instId, OAVCurvesData * dataOut) {
    return UAVObjGetInstanceData(OAVCurvesHandle(), instId, dataOut);
}
static inline int32_t OAVCurvesInstSet(uint16_t instId, const OAVCurvesData * dataIn) {
    return UAVObjSetInstanceData(OAVCurvesHandle(), instId, dataIn);
}
static inline int32_t OAVCurvesConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(OAVCurvesHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t OAVCurvesConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OAVCurvesHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t OAVCurvesConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OAVCurvesHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t OAVCurvesCreateInstance() {
    return UAVObjCreateInstance(OAVCurvesHandle(), &OAVCurvesSetDefaults);
}
static inline void OAVCurvesRequestUpdate() {
    UAVObjRequestUpdate(OAVCurvesHandle());
}
static inline void OAVCurvesRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(OAVCurvesHandle(), instId);
}
static inline void OAVCurvesUpdated() {
    UAVObjUpdated(OAVCurvesHandle());
}
static inline void OAVCurvesInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(OAVCurvesHandle(), instId);
}
static inline void OAVCurvesLogging() {
    UAVObjLogging(OAVCurvesHandle());
}
static inline void OAVCurvesInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(OAVCurvesHandle(), instId);
}
static inline int32_t OAVCurvesGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(OAVCurvesHandle(), dataOut);
}
static inline int32_t OAVCurvesSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(OAVCurvesHandle(), dataIn);
}
static inline int8_t OAVCurvesReadOnly() {
    return UAVObjReadOnly(OAVCurvesHandle());
}

/* Set/Get functions */
extern void OAVCurvesCurvePoint1Set(int8_t *NewCurvePoint1);
extern void OAVCurvesCurvePoint1Get(int8_t *NewCurvePoint1);
extern void OAVCurvesCurvePoint2Set(int8_t *NewCurvePoint2);
extern void OAVCurvesCurvePoint2Get(int8_t *NewCurvePoint2);
extern void OAVCurvesCurvePoint3Set(int8_t *NewCurvePoint3);
extern void OAVCurvesCurvePoint3Get(int8_t *NewCurvePoint3);
extern void OAVCurvesCurvePoint4Set(int8_t *NewCurvePoint4);
extern void OAVCurvesCurvePoint4Get(int8_t *NewCurvePoint4);
extern void OAVCurvesCurvePoint5Set(int8_t *NewCurvePoint5);
extern void OAVCurvesCurvePoint5Get(int8_t *NewCurvePoint5);
extern void OAVCurvesCurvePoint6Set(int8_t *NewCurvePoint6);
extern void OAVCurvesCurvePoint6Get(int8_t *NewCurvePoint6);
extern void OAVCurvesCurvePoint7Set(int8_t *NewCurvePoint7);
extern void OAVCurvesCurvePoint7Get(int8_t *NewCurvePoint7);
extern void OAVCurvesCurveSourceSet(OAVCurvesCurveSourceOptions *NewCurveSource);
extern void OAVCurvesCurveSourceGet(OAVCurvesCurveSourceOptions *NewCurveSource);


#endif // OAVCURVES_H

/**
 * @}
 * @}
 */
