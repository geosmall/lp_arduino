/**
 ******************************************************************************
 * @addtogroup UAVObjects OpenPilot UAVObjects
 * @{
 * @addtogroup OAVStatus OAVStatus
 * @brief OAV Status
 *
 * Autogenerated files and functions for OAVStatus Object
 *
 * @{
 *
 * @file       oavstatus.h
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 * @brief      Implementation of the OAVStatus object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: oavstatus.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OAVSTATUS_H
#define OAVSTATUS_H
#include <stdbool.h>
/* Object constants */
#define OAVSTATUS_OBJID 0x79BE2480
#define OAVSTATUS_ISSINGLEINST 1
#define OAVSTATUS_ISSETTINGS 0
#define OAVSTATUS_ISPRIORITY 0
#define OAVSTATUS_NUMBYTES sizeof(OAVStatusData)

/* Generic interface functions */
int32_t OAVStatusInitialize();
UAVObjHandle OAVStatusHandle();
void OAVStatusSetDefaults(UAVObjHandle obj, uint16_t instId);

/* Field P1Value information */

// Number of elements for field P1Value
#define OAVSTATUS_P1VALUE_NUMELEM 10

/* Field P2Value information */

// Number of elements for field P2Value
#define OAVSTATUS_P2VALUE_NUMELEM 10

/* Field OAVGyros information */

// Number of elements for field OAVGyros
#define OAVSTATUS_OAVGYROS_NUMELEM 3

/* Field OAVAccels information */

// Number of elements for field OAVAccels
#define OAVSTATUS_OAVACCELS_NUMELEM 3

/* Field OAVAngles information */

// Number of elements for field OAVAngles
#define OAVSTATUS_OAVANGLES_NUMELEM 2

/* Field OAVTransition information */

/* Field Initialized information */

// Enumeration options for field Initialized
typedef enum __attribute__ ((__packed__)) {
    OAVSTATUS_INITIALIZED_FALSE=0,
    OAVSTATUS_INITIALIZED_TRUE=1
} OAVStatusInitializedOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
        int16_t P1Value[10];
    int16_t P2Value[10];
    int16_t OAVGyros[3];
    int16_t OAVAccels[3];
    int16_t OAVAngles[2];
    int16_t OAVTransition;
    OAVStatusInitializedOptions Initialized;

} __attribute__((packed)) OAVStatusDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes so as to avoid the potential for CPU usage faults
 * on Cortex M4F during load/store of float UAVO fields
 */
typedef OAVStatusDataPacked __attribute__((aligned(4))) OAVStatusData;

/* Typesafe Object access functions */
static inline int32_t OAVStatusGet(OAVStatusData * dataOut) {
    return UAVObjGetData(OAVStatusHandle(), dataOut);
}
static inline int32_t OAVStatusSet(const OAVStatusData * dataIn) {
    return UAVObjSetData(OAVStatusHandle(), dataIn);
}
static inline int32_t OAVStatusInstGet(uint16_t instId, OAVStatusData * dataOut) {
    return UAVObjGetInstanceData(OAVStatusHandle(), instId, dataOut);
}
static inline int32_t OAVStatusInstSet(uint16_t instId, const OAVStatusData * dataIn) {
    return UAVObjSetInstanceData(OAVStatusHandle(), instId, dataIn);
}
static inline int32_t OAVStatusConnectQueue(xQueueHandle queue) {
    return UAVObjConnectQueue(OAVStatusHandle(), queue, EV_MASK_ALL_UPDATES);
}
static inline int32_t OAVStatusConnectCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OAVStatusHandle(), cb, EV_MASK_ALL_UPDATES, false);
}
static inline int32_t OAVStatusConnectFastCallback(UAVObjEventCallback cb) {
    return UAVObjConnectCallback(OAVStatusHandle(), cb, EV_MASK_ALL_UPDATES, true);
}
static inline uint16_t OAVStatusCreateInstance() {
    return UAVObjCreateInstance(OAVStatusHandle(), &OAVStatusSetDefaults);
}
static inline void OAVStatusRequestUpdate() {
    UAVObjRequestUpdate(OAVStatusHandle());
}
static inline void OAVStatusRequestInstUpdate(uint16_t instId) {
    UAVObjRequestInstanceUpdate(OAVStatusHandle(), instId);
}
static inline void OAVStatusUpdated() {
    UAVObjUpdated(OAVStatusHandle());
}
static inline void OAVStatusInstUpdated(uint16_t instId) {
    UAVObjInstanceUpdated(OAVStatusHandle(), instId);
}
static inline void OAVStatusLogging() {
    UAVObjLogging(OAVStatusHandle());
}
static inline void OAVStatusInstLogging(uint16_t instId) {
    UAVObjInstanceLogging(OAVStatusHandle(), instId);
}
static inline int32_t OAVStatusGetMetadata(UAVObjMetadata * dataOut) {
    return UAVObjGetMetadata(OAVStatusHandle(), dataOut);
}
static inline int32_t OAVStatusSetMetadata(const UAVObjMetadata * dataIn) {
    return UAVObjSetMetadata(OAVStatusHandle(), dataIn);
}
static inline int8_t OAVStatusReadOnly() {
    return UAVObjReadOnly(OAVStatusHandle());
}

/* Set/Get functions */
extern void OAVStatusP1ValueSet(int16_t *NewP1Value);
extern void OAVStatusP1ValueGet(int16_t *NewP1Value);
extern void OAVStatusP2ValueSet(int16_t *NewP2Value);
extern void OAVStatusP2ValueGet(int16_t *NewP2Value);
extern void OAVStatusOAVGyrosSet(int16_t *NewOAVGyros);
extern void OAVStatusOAVGyrosGet(int16_t *NewOAVGyros);
extern void OAVStatusOAVAccelsSet(int16_t *NewOAVAccels);
extern void OAVStatusOAVAccelsGet(int16_t *NewOAVAccels);
extern void OAVStatusOAVAnglesSet(int16_t *NewOAVAngles);
extern void OAVStatusOAVAnglesGet(int16_t *NewOAVAngles);
extern void OAVStatusOAVTransitionSet(int16_t *NewOAVTransition);
extern void OAVStatusOAVTransitionGet(int16_t *NewOAVTransition);
extern void OAVStatusInitializedSet(OAVStatusInitializedOptions *NewInitialized);
extern void OAVStatusInitializedGet(OAVStatusInitializedOptions *NewInitialized);


#endif // OAVSTATUS_H

/**
 * @}
 * @}
 */
